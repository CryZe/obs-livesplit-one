name: Rust

on:
  pull_request:
  push:
    branches:
      - 'master'
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        label:
          - Windows x86_64
          - Linux x86_64
          - macOS aarch64
          - macOS x86_64

        include:
          - label: Windows x86_64
            target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: skip

          - label: Linux x86_64
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: skip

          - label: macOS aarch64
            target: aarch64-apple-darwin
            os: macOS-latest
            cross: skip
            install_target: true

          - label: macOS x86_64
            target: x86_64-apple-darwin
            os: macOS-latest
            cross: skip

    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.toolchain || 'stable' }}

      - name: Install Target
        if: matrix.install_target != ''
        run: rustup target add ${{ matrix.target }}

      - name: Select XCode to use
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          sudo xcode-select -s "/Applications/Xcode_12.3.app"
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*

      - name: Install cross
        if: matrix.cross == ''
        run: sh .github/workflows/install.sh
        env:
          OS_NAME: ${{ matrix.os }}

      - name: Build Shared Library
        if: matrix.dylib == ''
        run: sh .github/workflows/build_shared.sh
        env:
          TARGET: ${{ matrix.target }}
          SKIP_CROSS: ${{ matrix.cross }}
          IS_DEPLOY: ${{ startsWith(github.ref, 'refs/tags/') && (matrix.release_anyway != '' || !(startsWith(matrix.toolchain, 'nightly') || startsWith(matrix.toolchain, 'beta'))) }}
          FEATURES: ${{ matrix.features }}
          OS_NAME: ${{ matrix.os }}

      - name: Prepare Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.release == ''
        shell: bash
        run: .github/workflows/before_deploy.sh
        env:
          OS_NAME: ${{ matrix.os }}
          TARGET: ${{ matrix.target }}

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.release == ''
        uses: softprops/action-gh-release@v1
        with:
          files: obs-livesplit-one-*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: clippy

      - name: Run Clippy
        run: cargo clippy --all-features

  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt

      - name: Run cargo fmt
        run: cargo fmt -- --check || true
